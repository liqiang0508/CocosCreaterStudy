// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        edge: {
          value: 0.15,
          inspector: {
            tooltip: "圆角范围",
            range: [0.0, 0.5]
          }
        }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>

  in vec4 v_color;

  uniform Props {
    float edge;
  };

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
    o *= texture(texture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    // vec2 uv = v_uv0.xy - vec2(0.5, 0.5);
    // float rx = abs(uv.x) - (0.5 - edge);
    // float ry = abs(uv.y) - (0.5 - edge);
    // float mx = step(0.5 - edge, abs(uv.x));
    // float my = step(0.5 - edge, abs(uv.y));
    // float radius = length(vec2(rx, ry));
    // float a =1.0 - mx * my * step(edge, radius) * smoothstep(0., edge * 0.02, radius - edge);

  
    // gl_FragColor = vec4(o.rgb, o.a * a);

     float edge = 0.5;
            float dis = 0.0;
            vec2 texCoord = v_uv0;
            if ( texCoord.x < edge )
            {
                if ( texCoord.y < edge )
                {
                    dis = distance( texCoord, vec2(edge, edge) );
                }
                if ( texCoord.y > (1.0 - edge) )
                {
                    dis = distance( texCoord, vec2(edge, (1.0 - edge)) );
                }
            }
            else if ( texCoord.x > (1.0 - edge) )
            {
                if ( texCoord.y < edge )
                {
                    dis = distance( texCoord, vec2((1.0 - edge), edge ) );
                }
                if ( texCoord.y > (1.0 - edge) )
                {
                    dis = distance( texCoord, vec2((1.0 - edge), (1.0 - edge) ) );
                }
            }
      
            if(dis > 0.001)
            {
                // 外圈沟
                float gap = edge * 0.02;
                if(dis <= edge - gap)
                {
                    gl_FragColor = texture2D( texture,texCoord);
                }
                else if(dis <= edge)
                {
                    // 平滑过渡
                    float t = smoothstep(0.0,gap,edge-dis);
                    vec4 color = texture2D( texture,texCoord);
                    gl_FragColor = vec4(color.rgb,t);
                }else{
                    gl_FragColor = vec4(0.,0.,0.,0.);
                }
            }
            else
            {
                gl_FragColor = texture2D( texture,texCoord);
            }

      
  }
}%

       
