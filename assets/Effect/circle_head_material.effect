// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        center: { value: [0.5, 0.5]}
        radius: { value: 0.5 }
        feather: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform Params{       // 与旧版的又一声明变化, 旧版 直接声明 uniform vec2 center;  而新版则要求,所有的uniform 声明放到一个UBO {}中,  "Parms" 名称随意, 其中的声明字段需要进行字节对齐.详细看官方文档.
    vec2  center;
    float radius;
    float feather;
  };

  void main () {
    // vec4 o = vec4(1, 1, 1, 1);

    // #if USE_TEXTURE
    // o *= texture(texture, v_uv0);
    //   #if CC_USE_ALPHA_ATLAS_TEXTURE
    //   o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
    //   #endif
    // #endif

    // o *= v_color;

    // ALPHA_TEST(o);

    // gl_FragColor = o;

    // 计算当前坐标点与 中心点(0.5, 0.5)的距离, 距离超过半径的点,直接 discard; 即return.
    // vec2 center = vec2(0.5,0.5);
    float dis = distance(v_uv0, center);

    if( dis > radius ){
        discard;
    }

   // 正常计算坐标点的颜色值. 
    vec4 o = vec4(1, 1, 1, 1);
    // o *= texture(texture, v_uv0);
    #if USE_TEXTURE
      o *= texture(texture, v_uv0);
    #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
    #endif
    #endif
    o *= v_color;

    //判断圆形周边的一圈像素, 根据羽化参数大小, 对周边一圈颜色的透明度进行平滑降低, 即>0.5r 为透明a=0, < 0.4r为不透明a=1,  否则透明度a= 线性0~1过渡.
    //dis < 0.4 则为1, >0.5则为0, 否则就为0~1之间插值
    if( feather > 0.0 ){
      o.a = smoothstep(radius, radius - feather, dis);
    }
    
    gl_FragColor = o;
  }
}%
