{
  "ver": "1.0.25",
  "uuid": "71f59b68-c531-4aa4-953e-b5cc5cf0bee6",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nvarying vec4 v_thisPos;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position,1.0);\n  v_thisPos = vec4(pos);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos ;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\nvarying vec4 v_thisPos;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec2 firstPos;\nuniform vec2 secondPos;\nbool isHide(){\n  if (secondPos.y == firstPos.y){\n    float xw = (secondPos.x - firstPos.x)*0.5;\n    if (  xw > 0.0  && v_thisPos.x < xw + firstPos.x){\n      return true;\n    }else if (xw < 0.0  && v_thisPos.x > xw + firstPos.x){\n      return true;\n    }\n  }\n  float k = ( secondPos.y - firstPos.y)/(secondPos.x - firstPos.x);\n  k = -1.0/k;\n  float b = (firstPos.y + (secondPos.y - firstPos.y)*0.5) -  k* (firstPos.x +(secondPos.x - firstPos.x)*0.5);\n  float y = k*v_thisPos.x + b;\n  if (secondPos.y  < firstPos.y && v_thisPos.y > y){\n      return true;\n  }else if (secondPos.y > firstPos.y && v_thisPos.y < y){\n      return true;\n  }\n  return false;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  if (isHide()){\n    o.a = 0.0;\n  }\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nout vec4 v_thisPos;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nuniform PointData {\n  vec2 firstPos;\n  vec2 secondPos;\n};\nvoid main () {\n  vec4 pos = vec4(a_position,1.0);\n  v_thisPos = vec4(pos);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos ;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\nin vec4 v_thisPos;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform PointData {\n  vec2 firstPos;\n  vec2 secondPos;\n};\nbool isHide(){\n  if (secondPos.y == firstPos.y){\n    float xw = (secondPos.x - firstPos.x)*0.5;\n    if (  xw > 0.0  && v_thisPos.x < xw + firstPos.x){\n      return true;\n    }else if (xw < 0.0  && v_thisPos.x > xw + firstPos.x){\n      return true;\n    }\n  }\n  float k = ( secondPos.y - firstPos.y)/(secondPos.x - firstPos.x);\n  k = -1.0/k;\n  float b = (firstPos.y + (secondPos.y - firstPos.y)*0.5) -  k* (firstPos.x +(secondPos.x - firstPos.x)*0.5);\n  float y = k*v_thisPos.x + b;\n  if (secondPos.y  < firstPos.y && v_thisPos.y > y){\n      return true;\n  }else if (secondPos.y > firstPos.y && v_thisPos.y < y){\n      return true;\n  }\n  return false;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  if (isHide()){\n    o.a = 0.0;\n  }\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}