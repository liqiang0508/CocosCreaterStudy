import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'

android {
    compileSdkVersion PROP_COMPILE_SDK_VERSION.toInteger()

    defaultConfig {
        applicationId "com.tao.honour"
        minSdkVersion PROP_MIN_SDK_VERSION
        targetSdkVersion PROP_TARGET_SDK_VERSION
        versionCode 10300
        versionName "1.3.0"
        ndk {
            abiFilters 'armeabi-v7a' //'arm64-v8a',
        }
//        externalNativeBuild {
//            ndkBuild {
//                if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
//                    // skip the NDK Build step if PROP_NDK_MODE is none
//                    targets 'cocos2djs'
//                    arguments 'NDK_TOOLCHAIN_VERSION=clang'
//
//                    def module_paths = [project.file("../../../cocos2d-x"),
//                                        project.file("../../../cocos2d-x/cocos"),
//                                        project.file("../../../cocos2d-x/external")]
//                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
//                        arguments 'NDK_MODULE_PATH=' + module_paths.join(";")
//                    }
//                    else {
//                        arguments 'NDK_MODULE_PATH=' + module_paths.join(':')
//                    }
//
//                    arguments '-j' + Runtime.runtime.availableProcessors()
//                    abiFilters.addAll(PROP_APP_ABI.split(':').collect{it as String})
//                }
//            }
//        }
    }
    //fix   Entry name 'classes.dex' collided报错
    packagingOptions {
        exclude 'classes.dex'
        exclude '**.**'
    }

    sourceSets.main {
        java.srcDirs "../src", "src"
        res.srcDirs "../res", 'res'
        jniLibs.srcDirs "../libs", 'libs'
        manifest.srcFile "AndroidManifest.xml"
    }

//    externalNativeBuild {
//        ndkBuild {
//            if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
//                // skip the NDK Build step if PROP_NDK_MODE is none
//                path "jni/Android.mk"
//            }
//        }
//    }

    signingConfigs {

       release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }

        debug {
            keyAlias 'fengtao'
            keyPassword '123456'
            storeFile file('keystore')
            storePassword '123456'
        }
    }

    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }

//            externalNativeBuild {
//                ndkBuild {
//                    arguments 'NDK_DEBUG=0'
//                }
//            }
        }
        debug {
            signingConfig signingConfigs.debug
        }
//        debug {
//            debuggable true
//            jniDebuggable true
//            renderscriptDebuggable true
//            externalNativeBuild {
//                ndkBuild {
//                    arguments 'NDK_DEBUG=1'
//                }
//            }
//        }
    }
}

android.applicationVariants.all { variant ->
    // delete previous files first
    delete "${buildDir}/intermediates/merged_assets/${variant.dirName}"

    variant.mergeAssetsProvider.get().doLast {
        def sourceDir = "${buildDir}/../../../../.."
//        def outputDir = "${buildDir}/intermediates/merged_assets/${variant.dirName}/out"
//        System.out.println("______sourceDir = " + sourceDir)
//        System.out.println("______outputDir1 = " + outputDir)
        copy {
            from "${sourceDir}/assets"
            into "${outputDir}/assets"
            into outputDir.dir("assets")
        }

        copy {
            from "${sourceDir}/src"
            into "${outputDir}/src"
            into outputDir.dir("src")
        }

        copy {
            from "${sourceDir}/jsb-adapter"
            into "${outputDir}/jsb-adapter"
            into outputDir.dir("jsb-adapter")
        }

        copy {
            from "${sourceDir}/main.js"
            from "${sourceDir}/project.json"
            into outputDir
        }
    }
}

dependencies {
    implementation fileTree(dir: '../libs', include: ['*.jar','*.aar'])
    implementation fileTree(dir: 'libs', include: ['*.jar','*.aar'])
    implementation fileTree(dir: "../../../cocos2d-x/cocos/platform/android/java/libs", include: ['*.jar'])
    implementation project(':libcocos2dx')
    implementation "androidx.core:core-ktx:1.2.0"
    api 'com.tencent.mm.opensdk:wechat-sdk-android-without-mta:+'
}
